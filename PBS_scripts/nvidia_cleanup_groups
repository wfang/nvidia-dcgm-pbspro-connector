#!/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 1994-2019 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# PBS Pro is free software. You can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# PBS Pro is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# For a copy of the commercial license terms and conditions,
# go to: (http://www.pbspro.com/UserArea/agreement.html)
# or contact the Altair Legal Department.
#
# Altair’s dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of PBS Pro and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair’s trademarks, including but not limited to "PBS™",
# "PBS Professional®", and "PBS Pro™" and Altair’s logos is subject to Altair's
# trademark licensing policies.
#

import os
import sys
import getopt
import json

path = os.path.join(os.sep, 'usr', 'src', 'dcgm', 'bindings')
if path not in sys.path:
    sys.path.append(path)

imported_dcgm_modules = True


try:
    import pydcgm
    import dcgm_structs
    import dcgm_fields
    import dcgm_agent
    import dcgmvalue
except:
    imported_dcgm_modules = False
        

def show_usage():
    print 'Usage: %s -g <grp_id list>' % os.path.basename(sys.argv[0])


try:
    opts, args = getopt.getopt(sys.argv[1:], 'g:')
except:
    show_usage()
    sys.exit(1)


group_ids = []


for o, a in opts:
    if o == '-g':
        group_ids = json.loads(a)

if not (group_ids):
    show_usage()
    sys.exit(1)


def delete_group(handleObj, groupObj):
    groupObj.Delete()
        
    ## Destroy the group
    del(groupObj)
    groupObj = None


def cleanup(grpIds):
    if imported_dcgm_modules:
        dcgmHandle = pydcgm.DcgmHandle(ipAddress='127.0.0.1', opMode=dcgm_structs.DCGM_OPERATION_MODE_AUTO)
    
        ## Get a handle to the system level object for DCGM
        dcgmSystem = dcgmHandle.GetSystem()
    
        for grpId in grpIds:
            dcgmGroup = pydcgm.DcgmGroup(dcgmHandle, groupId = int(grpId))
            delete_group(dcgmHandle, dcgmGroup)

        ## Shut down the host engine

        del(dcgmHandle)
        dcgmHandle = None

    else:
        print "Module import error"


cleanup(group_ids)

print "Cleaned up group ids:",group_ids

