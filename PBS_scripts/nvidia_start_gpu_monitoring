#!/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 1994-2019 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# PBS Pro is free software. You can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# PBS Pro is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# For a copy of the commercial license terms and conditions,
# go to: (http://www.pbspro.com/UserArea/agreement.html)
# or contact the Altair Legal Department.
#
# Altair’s dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of PBS Pro and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair’s trademarks, including but not limited to "PBS™",
# "PBS Professional®", and "PBS Pro™" and Altair’s logos is subject to Altair's
# trademark licensing policies.
#

import os
import sys
import getopt
import json

path = os.path.join(os.sep, 'usr', 'local', 'dcgm', 'bindings')
if path not in sys.path:
    sys.path.append(path)

import pydcgm
import dcgm_structs
import dcgm_fields
import dcgm_agent
import dcgmvalue

        
def show_usage():
    print 'Usage: %s -g <gpu_id list> -j <job id> -w <walltime secs>' % os.path.basename(sys.argv[0])

try:
    opts, args = getopt.getopt(sys.argv[1:], 'g:j:w:')
except:
    show_usage()
    sys.exit(1)
    

gpu_list = []
job_id = ''

for o, a in opts:
    if o == '-g':
        gpu_list = json.loads(a)
    elif o == '-j':
        job_id = a
    elif o == '-w':
        walltime_secs = a
        
if not (gpu_list and job_id and walltime_secs):
    show_usage()
    sys.exit(1)

    
#print 'gpu_list', gpu_list
#print 'job_id', job_id


def setup_dcgm_group(group_name, gpus):
    # DCGM v1.3.3 introduced persistAfterDisconnect parameter to define persistance of the connection.
    # In previous versions, default behavior was perhaps to persist the connection.
    handleObj = pydcgm.DcgmHandle(ipAddress='127.0.0.1', opMode=dcgm_structs.DCGM_OPERATION_MODE_AUTO, persistAfterDisconnect=True)
    
    systemObj = handleObj.GetSystem()
    
    groupObj = systemObj.GetEmptyGroup(group_name)
    
    for gpu in gpus:
        groupObj.AddGpu(int(gpu))
    
    gpuIds = groupObj.GetGpuIds() 
    #print 'gpuIds %s' % (gpuIds)
    
    return handleObj, groupObj
    
    
handleObj, groupObj = setup_dcgm_group(job_id, gpu_list)

groupObj.stats.WatchJobFields(1000000, int(walltime_secs), 0)

# Notify DCGM to start collecting stats
groupObj.stats.StartJobStats(job_id)

print str(groupObj.GetId().value)

